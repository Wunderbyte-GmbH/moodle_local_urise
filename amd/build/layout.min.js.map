{"version":3,"file":"layout.min.js","sources":["../src/layout.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_urise\n * @author     Bernhard Fischer\n * @copyright  2024 Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Modal form to manage booking option tags (botags).\n *\n * @module     local_urise\n * @copyright  2024 Wunderbyte GmbH\n * @author     Georg MaiÃŸer\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\n /**\n  * [Description for init]\n  *\n  * @return [type]\n  *\n  */\nexport function init() {\n    // Run on initial load\n    adjustHeights();\n\n    // Re-run on window resize\n    window.addEventListener('resize', adjustHeights);\n}\n /**\n  * Adjust height function for Wunderbyte Table.\n  *\n  * @return [type]\n  *\n  */\nfunction adjustHeights() {\n\n    if (window.innerWidth > 768) {\n        const cards = document.querySelectorAll('.mod-booking-card');\n        // Assuming you have a container for the cards.\n        const container = document.querySelector('.wunderbyte-table-grid.rows-container');\n\n        if (!cards || !container || !cards[0]) {\n            return;\n        }\n\n        const cardWidth = cards[0].offsetWidth;\n        const containerWidth = container.offsetWidth;\n\n        // Calculate the number of cards per row\n        const numberOfCardsInRow = Math.floor(containerWidth / cardWidth);\n\n        if (numberOfCardsInRow < 1) {\n            return;\n        }\n\n        // Reset heights\n        cards.forEach(function(card) {\n            const cardBody = card.querySelector('.mod-booking-card-body');\n            const cardInfo = card.querySelector('.mod-booking-card-infos');\n            const cardFooter = card.querySelector('.mod-booking-card-footer');\n\n            cardBody.style.height = 'auto';\n            cardInfo.style.height = 'auto';\n            cardFooter.style.height = 'auto';\n        });\n\n        for (let i = 0; i < cards.length; i += numberOfCardsInRow) {\n            let maxBodyHeight = 0;\n            let maxInfoHeight = 0;\n            let maxFooterHeight = 0;\n\n            // Calculate the maximum heights for the current group of cards\n            for (let j = i; j < i + numberOfCardsInRow && j < cards.length; j++) {\n                const cardBody = cards[j].querySelector('.mod-booking-card-body');\n                const cardInfo = cards[j].querySelector('.mod-booking-card-infos');\n                const cardFooter = cards[j].querySelector('.mod-booking-card-footer');\n\n                if (cardBody.offsetHeight > maxBodyHeight) {\n                    maxBodyHeight = cardBody.offsetHeight;\n                }\n                if (cardInfo.offsetHeight > maxInfoHeight) {\n                    maxInfoHeight = cardInfo.offsetHeight;\n                }\n                if (cardFooter.offsetHeight > maxFooterHeight) {\n                    maxFooterHeight = cardFooter.offsetHeight;\n                }\n            }\n\n            // Apply the maximum heights to the current group of cards\n            for (let j = i; j < i + numberOfCardsInRow && j < cards.length; j++) {\n                const cardBody = cards[j].querySelector('.mod-booking-card-body');\n                const cardInfo = cards[j].querySelector('.mod-booking-card-infos');\n                const cardFooter = cards[j].querySelector('.mod-booking-card-footer');\n\n                cardBody.style.height = maxBodyHeight + 'px';\n                cardInfo.style.height = maxInfoHeight + 'px';\n                cardFooter.style.height = maxFooterHeight + 'px';\n            }\n        }\n    }\n}"],"names":["adjustHeights","window","innerWidth","cards","document","querySelectorAll","container","querySelector","cardWidth","offsetWidth","containerWidth","numberOfCardsInRow","Math","floor","forEach","card","cardBody","cardInfo","cardFooter","style","height","i","length","maxBodyHeight","maxInfoHeight","maxFooterHeight","j","offsetHeight","addEventListener"],"mappings":"qEAmDSA,mBAEDC,OAAOC,WAAa,IAAK,OACnBC,MAAQC,SAASC,iBAAiB,qBAElCC,UAAYF,SAASG,cAAc,6CAEpCJ,QAAUG,YAAcH,MAAM,gBAI7BK,UAAYL,MAAM,GAAGM,YACrBC,eAAiBJ,UAAUG,YAG3BE,mBAAqBC,KAAKC,MAAMH,eAAiBF,cAEnDG,mBAAqB,SAKzBR,MAAMW,SAAQ,SAASC,YACbC,SAAWD,KAAKR,cAAc,0BAC9BU,SAAWF,KAAKR,cAAc,2BAC9BW,WAAaH,KAAKR,cAAc,4BAEtCS,SAASG,MAAMC,OAAS,OACxBH,SAASE,MAAMC,OAAS,OACxBF,WAAWC,MAAMC,OAAS,cAGzB,IAAIC,EAAI,EAAGA,EAAIlB,MAAMmB,OAAQD,GAAKV,mBAAoB,KACnDY,cAAgB,EAChBC,cAAgB,EAChBC,gBAAkB,MAGjB,IAAIC,EAAIL,EAAGK,EAAIL,EAAIV,oBAAsBe,EAAIvB,MAAMmB,OAAQI,IAAK,OAC3DV,SAAWb,MAAMuB,GAAGnB,cAAc,0BAClCU,SAAWd,MAAMuB,GAAGnB,cAAc,2BAClCW,WAAaf,MAAMuB,GAAGnB,cAAc,4BAEtCS,SAASW,aAAeJ,gBACxBA,cAAgBP,SAASW,cAEzBV,SAASU,aAAeH,gBACxBA,cAAgBP,SAASU,cAEzBT,WAAWS,aAAeF,kBAC1BA,gBAAkBP,WAAWS,kBAKhC,IAAID,EAAIL,EAAGK,EAAIL,EAAIV,oBAAsBe,EAAIvB,MAAMmB,OAAQI,IAAK,OAC3DV,SAAWb,MAAMuB,GAAGnB,cAAc,0BAClCU,SAAWd,MAAMuB,GAAGnB,cAAc,2BAClCW,WAAaf,MAAMuB,GAAGnB,cAAc,4BAE1CS,SAASG,MAAMC,OAASG,cAAgB,KACxCN,SAASE,MAAMC,OAASI,cAAgB,KACxCN,WAAWC,MAAMC,OAASK,gBAAkB;;;;;;;;;;;;;;;WAzExDzB,gBAGAC,OAAO2B,iBAAiB,SAAU5B"}